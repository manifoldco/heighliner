/*
BSD 3-Clause License

Copyright (c) 2018, Arigato Machine Inc.
All rights reserved.

Redistribution and use in source and binary forms, with or without
modification, are permitted provided that the following conditions are met:

* Redistributions of source code must retain the above copyright notice, this
  list of conditions and the following disclaimer.

* Redistributions in binary form must reproduce the above copyright notice,
  this list of conditions and the following disclaimer in the documentation
  and/or other materials provided with the distribution.

* Neither the name of the copyright holder nor the names of its
  contributors may be used to endorse or promote products derived from
  this software without specific prior written permission.

THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE
FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
*/

// Code generated by client-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "github.com/manifoldco/heighliner/apis/heighliner/v1alpha1"
	"github.com/manifoldco/heighliner/pkg/client/generated/clientset/versioned/scheme"
	serializer "k8s.io/apimachinery/pkg/runtime/serializer"
	rest "k8s.io/client-go/rest"
)

type HeighlinerV1alpha1Interface interface {
	RESTClient() rest.Interface
	AvailabilityPoliciesGetter
	ConfigPoliciesGetter
	GitHubRepositoriesGetter
	HealthPoliciesGetter
	ImagePoliciesGetter
	MicroservicesGetter
	NetworkPoliciesGetter
	SecurityPoliciesGetter
	VersionedMicroservicesGetter
	VersioningPoliciesGetter
}

// HeighlinerV1alpha1Client is used to interact with features provided by the heighliner group.
type HeighlinerV1alpha1Client struct {
	restClient rest.Interface
}

func (c *HeighlinerV1alpha1Client) AvailabilityPolicies(namespace string) AvailabilityPolicyInterface {
	return newAvailabilityPolicies(c, namespace)
}

func (c *HeighlinerV1alpha1Client) ConfigPolicies(namespace string) ConfigPolicyInterface {
	return newConfigPolicies(c, namespace)
}

func (c *HeighlinerV1alpha1Client) GitHubRepositories(namespace string) GitHubRepositoryInterface {
	return newGitHubRepositories(c, namespace)
}

func (c *HeighlinerV1alpha1Client) HealthPolicies(namespace string) HealthPolicyInterface {
	return newHealthPolicies(c, namespace)
}

func (c *HeighlinerV1alpha1Client) ImagePolicies(namespace string) ImagePolicyInterface {
	return newImagePolicies(c, namespace)
}

func (c *HeighlinerV1alpha1Client) Microservices(namespace string) MicroserviceInterface {
	return newMicroservices(c, namespace)
}

func (c *HeighlinerV1alpha1Client) NetworkPolicies(namespace string) NetworkPolicyInterface {
	return newNetworkPolicies(c, namespace)
}

func (c *HeighlinerV1alpha1Client) SecurityPolicies(namespace string) SecurityPolicyInterface {
	return newSecurityPolicies(c, namespace)
}

func (c *HeighlinerV1alpha1Client) VersionedMicroservices(namespace string) VersionedMicroserviceInterface {
	return newVersionedMicroservices(c, namespace)
}

func (c *HeighlinerV1alpha1Client) VersioningPolicies(namespace string) VersioningPolicyInterface {
	return newVersioningPolicies(c, namespace)
}

// NewForConfig creates a new HeighlinerV1alpha1Client for the given config.
func NewForConfig(c *rest.Config) (*HeighlinerV1alpha1Client, error) {
	config := *c
	if err := setConfigDefaults(&config); err != nil {
		return nil, err
	}
	client, err := rest.RESTClientFor(&config)
	if err != nil {
		return nil, err
	}
	return &HeighlinerV1alpha1Client{client}, nil
}

// NewForConfigOrDie creates a new HeighlinerV1alpha1Client for the given config and
// panics if there is an error in the config.
func NewForConfigOrDie(c *rest.Config) *HeighlinerV1alpha1Client {
	client, err := NewForConfig(c)
	if err != nil {
		panic(err)
	}
	return client
}

// New creates a new HeighlinerV1alpha1Client for the given RESTClient.
func New(c rest.Interface) *HeighlinerV1alpha1Client {
	return &HeighlinerV1alpha1Client{c}
}

func setConfigDefaults(config *rest.Config) error {
	gv := v1alpha1.SchemeGroupVersion
	config.GroupVersion = &gv
	config.APIPath = "/apis"
	config.NegotiatedSerializer = serializer.DirectCodecFactory{CodecFactory: scheme.Codecs}

	if config.UserAgent == "" {
		config.UserAgent = rest.DefaultKubernetesUserAgent()
	}

	return nil
}

// RESTClient returns a RESTClient that is used to communicate
// with API server by this client implementation.
func (c *HeighlinerV1alpha1Client) RESTClient() rest.Interface {
	if c == nil {
		return nil
	}
	return c.restClient
}
