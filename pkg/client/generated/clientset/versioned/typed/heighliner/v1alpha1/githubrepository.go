/*
BSD 3-Clause License

Copyright (c) 2018, Arigato Machine Inc.
All rights reserved.

Redistribution and use in source and binary forms, with or without
modification, are permitted provided that the following conditions are met:

* Redistributions of source code must retain the above copyright notice, this
  list of conditions and the following disclaimer.

* Redistributions in binary form must reproduce the above copyright notice,
  this list of conditions and the following disclaimer in the documentation
  and/or other materials provided with the distribution.

* Neither the name of the copyright holder nor the names of its
  contributors may be used to endorse or promote products derived from
  this software without specific prior written permission.

THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE
FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
*/

// Code generated by client-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "github.com/manifoldco/heighliner/apis/heighliner/v1alpha1"
	scheme "github.com/manifoldco/heighliner/pkg/client/generated/clientset/versioned/scheme"
	v1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	types "k8s.io/apimachinery/pkg/types"
	watch "k8s.io/apimachinery/pkg/watch"
	rest "k8s.io/client-go/rest"
)

// GitHubRepositoriesGetter has a method to return a GitHubRepositoryInterface.
// A group's client should implement this interface.
type GitHubRepositoriesGetter interface {
	GitHubRepositories(namespace string) GitHubRepositoryInterface
}

// GitHubRepositoryInterface has methods to work with GitHubRepository resources.
type GitHubRepositoryInterface interface {
	Create(*v1alpha1.GitHubRepository) (*v1alpha1.GitHubRepository, error)
	Update(*v1alpha1.GitHubRepository) (*v1alpha1.GitHubRepository, error)
	UpdateStatus(*v1alpha1.GitHubRepository) (*v1alpha1.GitHubRepository, error)
	Delete(name string, options *v1.DeleteOptions) error
	DeleteCollection(options *v1.DeleteOptions, listOptions v1.ListOptions) error
	Get(name string, options v1.GetOptions) (*v1alpha1.GitHubRepository, error)
	List(opts v1.ListOptions) (*v1alpha1.GitHubRepositoryList, error)
	Watch(opts v1.ListOptions) (watch.Interface, error)
	Patch(name string, pt types.PatchType, data []byte, subresources ...string) (result *v1alpha1.GitHubRepository, err error)
	GitHubRepositoryExpansion
}

// gitHubRepositories implements GitHubRepositoryInterface
type gitHubRepositories struct {
	client rest.Interface
	ns     string
}

// newGitHubRepositories returns a GitHubRepositories
func newGitHubRepositories(c *HeighlinerV1alpha1Client, namespace string) *gitHubRepositories {
	return &gitHubRepositories{
		client: c.RESTClient(),
		ns:     namespace,
	}
}

// Get takes name of the gitHubRepository, and returns the corresponding gitHubRepository object, and an error if there is any.
func (c *gitHubRepositories) Get(name string, options v1.GetOptions) (result *v1alpha1.GitHubRepository, err error) {
	result = &v1alpha1.GitHubRepository{}
	err = c.client.Get().
		Namespace(c.ns).
		Resource("githubrepositories").
		Name(name).
		VersionedParams(&options, scheme.ParameterCodec).
		Do().
		Into(result)
	return
}

// List takes label and field selectors, and returns the list of GitHubRepositories that match those selectors.
func (c *gitHubRepositories) List(opts v1.ListOptions) (result *v1alpha1.GitHubRepositoryList, err error) {
	result = &v1alpha1.GitHubRepositoryList{}
	err = c.client.Get().
		Namespace(c.ns).
		Resource("githubrepositories").
		VersionedParams(&opts, scheme.ParameterCodec).
		Do().
		Into(result)
	return
}

// Watch returns a watch.Interface that watches the requested gitHubRepositories.
func (c *gitHubRepositories) Watch(opts v1.ListOptions) (watch.Interface, error) {
	opts.Watch = true
	return c.client.Get().
		Namespace(c.ns).
		Resource("githubrepositories").
		VersionedParams(&opts, scheme.ParameterCodec).
		Watch()
}

// Create takes the representation of a gitHubRepository and creates it.  Returns the server's representation of the gitHubRepository, and an error, if there is any.
func (c *gitHubRepositories) Create(gitHubRepository *v1alpha1.GitHubRepository) (result *v1alpha1.GitHubRepository, err error) {
	result = &v1alpha1.GitHubRepository{}
	err = c.client.Post().
		Namespace(c.ns).
		Resource("githubrepositories").
		Body(gitHubRepository).
		Do().
		Into(result)
	return
}

// Update takes the representation of a gitHubRepository and updates it. Returns the server's representation of the gitHubRepository, and an error, if there is any.
func (c *gitHubRepositories) Update(gitHubRepository *v1alpha1.GitHubRepository) (result *v1alpha1.GitHubRepository, err error) {
	result = &v1alpha1.GitHubRepository{}
	err = c.client.Put().
		Namespace(c.ns).
		Resource("githubrepositories").
		Name(gitHubRepository.Name).
		Body(gitHubRepository).
		Do().
		Into(result)
	return
}

// UpdateStatus was generated because the type contains a Status member.
// Add a +genclient:noStatus comment above the type to avoid generating UpdateStatus().

func (c *gitHubRepositories) UpdateStatus(gitHubRepository *v1alpha1.GitHubRepository) (result *v1alpha1.GitHubRepository, err error) {
	result = &v1alpha1.GitHubRepository{}
	err = c.client.Put().
		Namespace(c.ns).
		Resource("githubrepositories").
		Name(gitHubRepository.Name).
		SubResource("status").
		Body(gitHubRepository).
		Do().
		Into(result)
	return
}

// Delete takes name of the gitHubRepository and deletes it. Returns an error if one occurs.
func (c *gitHubRepositories) Delete(name string, options *v1.DeleteOptions) error {
	return c.client.Delete().
		Namespace(c.ns).
		Resource("githubrepositories").
		Name(name).
		Body(options).
		Do().
		Error()
}

// DeleteCollection deletes a collection of objects.
func (c *gitHubRepositories) DeleteCollection(options *v1.DeleteOptions, listOptions v1.ListOptions) error {
	return c.client.Delete().
		Namespace(c.ns).
		Resource("githubrepositories").
		VersionedParams(&listOptions, scheme.ParameterCodec).
		Body(options).
		Do().
		Error()
}

// Patch applies the patch and returns the patched gitHubRepository.
func (c *gitHubRepositories) Patch(name string, pt types.PatchType, data []byte, subresources ...string) (result *v1alpha1.GitHubRepository, err error) {
	result = &v1alpha1.GitHubRepository{}
	err = c.client.Patch(pt).
		Namespace(c.ns).
		Resource("githubrepositories").
		SubResource(subresources...).
		Name(name).
		Body(data).
		Do().
		Into(result)
	return
}
