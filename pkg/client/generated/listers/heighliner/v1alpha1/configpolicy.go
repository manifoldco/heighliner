/*
BSD 3-Clause License

Copyright (c) 2018, Arigato Machine Inc.
All rights reserved.

Redistribution and use in source and binary forms, with or without
modification, are permitted provided that the following conditions are met:

* Redistributions of source code must retain the above copyright notice, this
  list of conditions and the following disclaimer.

* Redistributions in binary form must reproduce the above copyright notice,
  this list of conditions and the following disclaimer in the documentation
  and/or other materials provided with the distribution.

* Neither the name of the copyright holder nor the names of its
  contributors may be used to endorse or promote products derived from
  this software without specific prior written permission.

THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE
FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
*/

// Code generated by lister-gen. DO NOT EDIT.

// This file was automatically generated by lister-gen

package v1alpha1

import (
	v1alpha1 "github.com/manifoldco/heighliner/apis/heighliner/v1alpha1"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// ConfigPolicyLister helps list ConfigPolicies.
type ConfigPolicyLister interface {
	// List lists all ConfigPolicies in the indexer.
	List(selector labels.Selector) (ret []*v1alpha1.ConfigPolicy, err error)
	// ConfigPolicies returns an object that can list and get ConfigPolicies.
	ConfigPolicies(namespace string) ConfigPolicyNamespaceLister
	ConfigPolicyListerExpansion
}

// configPolicyLister implements the ConfigPolicyLister interface.
type configPolicyLister struct {
	indexer cache.Indexer
}

// NewConfigPolicyLister returns a new ConfigPolicyLister.
func NewConfigPolicyLister(indexer cache.Indexer) ConfigPolicyLister {
	return &configPolicyLister{indexer: indexer}
}

// List lists all ConfigPolicies in the indexer.
func (s *configPolicyLister) List(selector labels.Selector) (ret []*v1alpha1.ConfigPolicy, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.ConfigPolicy))
	})
	return ret, err
}

// ConfigPolicies returns an object that can list and get ConfigPolicies.
func (s *configPolicyLister) ConfigPolicies(namespace string) ConfigPolicyNamespaceLister {
	return configPolicyNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// ConfigPolicyNamespaceLister helps list and get ConfigPolicies.
type ConfigPolicyNamespaceLister interface {
	// List lists all ConfigPolicies in the indexer for a given namespace.
	List(selector labels.Selector) (ret []*v1alpha1.ConfigPolicy, err error)
	// Get retrieves the ConfigPolicy from the indexer for a given namespace and name.
	Get(name string) (*v1alpha1.ConfigPolicy, error)
	ConfigPolicyNamespaceListerExpansion
}

// configPolicyNamespaceLister implements the ConfigPolicyNamespaceLister
// interface.
type configPolicyNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all ConfigPolicies in the indexer for a given namespace.
func (s configPolicyNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.ConfigPolicy, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.ConfigPolicy))
	})
	return ret, err
}

// Get retrieves the ConfigPolicy from the indexer for a given namespace and name.
func (s configPolicyNamespaceLister) Get(name string) (*v1alpha1.ConfigPolicy, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("configpolicy"), name)
	}
	return obj.(*v1alpha1.ConfigPolicy), nil
}
